#!/bin/bash
# UniFi UDM Pro BGP Configuration Script
# Generated by Terraform - Manual execution required
#
# IMPORTANT: This script is for documentation purposes only.
# BGP configuration must be performed manually through:
# 1. UniFi Network Application (if BGP features are available)
# 2. SSH access to UDM Pro
# 3. Direct API calls to UniFi Controller

set -euo pipefail

# Configuration Variables
UDM_PRO_IP="${UDM_PRO_IP:-192.168.1.1}"
UNIFI_SITE="${site}"
BGP_AS_NUMBER="${bgp_config.as_number}"
BGP_ROUTER_ID="${bgp_config.router_id}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if running as root or with sudo
check_privileges() {
    if [[ $EUID -ne 0 ]]; then
        error "This script may require root privileges for SSH access to UDM Pro"
        info "Consider running with sudo or ensure SSH key authentication is configured"
    fi
}

# Validate network connectivity to UDM Pro
check_connectivity() {
    log "Checking connectivity to UDM Pro at $UDM_PRO_IP..."
    
    if ping -c 1 -W 5 "$UDM_PRO_IP" >/dev/null 2>&1; then
        log "UDM Pro is reachable at $UDM_PRO_IP"
    else
        error "Cannot reach UDM Pro at $UDM_PRO_IP"
        info "Please verify the IP address and network connectivity"
        exit 1
    fi
}

# Display BGP configuration summary
show_bgp_config() {
    log "BGP Configuration Summary:"
    echo "=========================="
    echo "AS Number: $BGP_AS_NUMBER"
    echo "Router ID: $BGP_ROUTER_ID"
    echo "Site: $UNIFI_SITE"
    echo ""
    
%{ if length(bgp_config.neighbors) > 0 ~}
    echo "BGP Neighbors:"
%{ for neighbor in bgp_config.neighbors ~}
    echo "  - ${neighbor.ip} (AS ${neighbor.remote_as})${neighbor.description != "" ? " - ${neighbor.description}" : ""}"
%{ endfor ~}
    echo ""
%{ endif ~}

%{ if length(bgp_config.advertised_networks) > 0 ~}
    echo "Advertised Networks:"
%{ for network in bgp_config.advertised_networks ~}
    echo "  - ${network.prefix}${network.route_map != null ? " (route-map: ${network.route_map})" : ""}"
%{ endfor ~}
    echo ""
%{ endif ~}

%{ if bgp_config.ipv6_enabled && length(bgp_config.ipv6_neighbors) > 0 ~}
    echo "IPv6 BGP Neighbors:"
%{ for neighbor in bgp_config.ipv6_neighbors ~}
    echo "  - ${neighbor.ip} (AS ${neighbor.remote_as})${neighbor.description != "" ? " - ${neighbor.description}" : ""}"
%{ endfor ~}
    echo ""
%{ endif ~}

%{ if bgp_config.ipv6_enabled && length(bgp_config.ipv6_networks) > 0 ~}
    echo "IPv6 Advertised Networks:"
%{ for network in bgp_config.ipv6_networks ~}
    echo "  - ${network.prefix}"
%{ endfor ~}
    echo ""
%{ endif ~}
}

# Generate UniFi Network Application configuration steps
generate_ui_config() {
    log "UniFi Network Application Configuration Steps:"
    echo "=============================================="
    echo ""
    echo "1. Access UniFi Network Application:"
    echo "   - Open web browser to https://$UDM_PRO_IP"
    echo "   - Login with administrator credentials"
    echo ""
    echo "2. Navigate to BGP Settings:"
    echo "   - Go to Settings â†’ Routing & Firewall"
    echo "   - Look for Advanced Routing or BGP section"
    echo "   - If BGP options are not available, use SSH method below"
    echo ""
    echo "3. Configure BGP Parameters:"
    echo "   - AS Number: $BGP_AS_NUMBER"
    echo "   - Router ID: $BGP_ROUTER_ID"
    echo ""
%{ if length(bgp_config.neighbors) > 0 ~}
    echo "4. Add BGP Neighbors:"
%{ for neighbor in bgp_config.neighbors ~}
    echo "   - IP: ${neighbor.ip}"
    echo "     Remote AS: ${neighbor.remote_as}"
%{ if neighbor.description != "" ~}
    echo "     Description: ${neighbor.description}"
%{ endif ~}
%{ if neighbor.password != null ~}
    echo "     Authentication: MD5 (password configured)"
%{ endif ~}
    echo ""
%{ endfor ~}
%{ endif ~}

%{ if length(bgp_config.advertised_networks) > 0 ~}
    echo "5. Configure Network Advertisements:"
%{ for network in bgp_config.advertised_networks ~}
    echo "   - Network: ${network.prefix}"
%{ if network.route_map != null ~}
    echo "     Route Map: ${network.route_map}"
%{ endif ~}
%{ endfor ~}
    echo ""
%{ endif ~}
}

# Generate SSH configuration commands
generate_ssh_config() {
    log "SSH Configuration Commands:"
    echo "=========================="
    echo ""
    warn "The following commands are examples and may need adjustment"
    warn "based on your specific UniFi OS version and BGP implementation"
    echo ""
    
    echo "# SSH into UDM Pro"
    echo "ssh root@$UDM_PRO_IP"
    echo ""
    echo "# Enter UniFi OS shell (if required)"
    echo "unifi-os shell"
    echo ""
    echo "# Configure BGP (example commands - verify with UniFi documentation)"
    echo "configure"
    echo "set protocols bgp $BGP_AS_NUMBER"
    echo "set protocols bgp $BGP_AS_NUMBER parameters router-id $BGP_ROUTER_ID"
    echo ""
    
%{ if length(bgp_config.neighbors) > 0 ~}
    echo "# Configure BGP neighbors"
%{ for neighbor in bgp_config.neighbors ~}
    echo "set protocols bgp $BGP_AS_NUMBER neighbor ${neighbor.ip} remote-as ${neighbor.remote_as}"
%{ if neighbor.description != "" ~}
    echo "set protocols bgp $BGP_AS_NUMBER neighbor ${neighbor.ip} description '${neighbor.description}'"
%{ endif ~}
%{ if neighbor.password != null ~}
    echo "set protocols bgp $BGP_AS_NUMBER neighbor ${neighbor.ip} password '${neighbor.password}'"
%{ endif ~}
    echo ""
%{ endfor ~}
%{ endif ~}

%{ if length(bgp_config.advertised_networks) > 0 ~}
    echo "# Advertise networks"
%{ for network in bgp_config.advertised_networks ~}
    echo "set protocols bgp $BGP_AS_NUMBER network ${network.prefix}"
%{ endfor ~}
    echo ""
%{ endif ~}

    echo "# Commit and save configuration"
    echo "commit"
    echo "save"
    echo "exit"
}

# Generate API configuration example
generate_api_config() {
    log "UniFi Controller API Configuration:"
    echo "=================================="
    echo ""
    warn "API configuration requires direct HTTP calls to the UniFi Controller"
    warn "This method is advanced and may require reverse engineering the API"
    echo ""
    
    echo "# Example API call structure (adjust based on actual API)"
    echo "curl -X POST 'https://$UDM_PRO_IP/api/s/$UNIFI_SITE/rest/routing' \\"
    echo "  -H 'Content-Type: application/json' \\"
    echo "  -H 'Authorization: Bearer \$API_TOKEN' \\"
    echo "  -d '{"
    echo "    \"bgp\": {"
    echo "      \"as_number\": $BGP_AS_NUMBER,"
    echo "      \"router_id\": \"$BGP_ROUTER_ID\","
    echo "      \"neighbors\": ["
%{ for i, neighbor in bgp_config.neighbors ~}
    echo "        {"
    echo "          \"ip\": \"${neighbor.ip}\","
    echo "          \"remote_as\": ${neighbor.remote_as},"
    echo "          \"description\": \"${neighbor.description}\""
    echo "        }${i < length(bgp_config.neighbors) - 1 ? "," : ""}"
%{ endfor ~}
    echo "      ],"
    echo "      \"networks\": ["
%{ for i, network in bgp_config.advertised_networks ~}
    echo "        {"
    echo "          \"prefix\": \"${network.prefix}\""
    echo "        }${i < length(bgp_config.advertised_networks) - 1 ? "," : ""}"
%{ endfor ~}
    echo "      ]"
    echo "    }"
    echo "  }'"
}

# Validation checks
run_validation() {
    log "Running BGP configuration validation..."
    
    # Check for AS number conflicts
%{ if bgp_config.as_number >= 64512 && bgp_config.as_number <= 65534 ~}
    warn "Using private AS number ${bgp_config.as_number} (RFC 1930 range)"
%{ endif ~}

%{ if bgp_config.as_number >= 4200000000 && bgp_config.as_number <= 4294967294 ~}
    warn "Using private AS number ${bgp_config.as_number} (RFC 6996 range)"
%{ endif ~}

    # Check for network overlaps
%{ for network in bgp_config.advertised_networks ~}
%{ if can(regex("^192\\.168\\.|^10\\.|^172\\.(1[6-9]|2[0-9]|3[01])\\.", network.prefix)) ~}
    warn "Network ${network.prefix} may overlap with private address space"
%{ endif ~}
%{ endfor ~}

    # Check neighbor connectivity (basic ping test)
%{ for neighbor in bgp_config.neighbors ~}
    if ping -c 1 -W 2 "${neighbor.ip}" >/dev/null 2>&1; then
        log "BGP neighbor ${neighbor.ip} is reachable"
    else
        warn "BGP neighbor ${neighbor.ip} is not reachable - verify network connectivity"
    fi
%{ endfor ~}
}

# Main execution
main() {
    log "UniFi UDM Pro BGP Configuration Script"
    echo "======================================"
    echo ""
    
    error "IMPORTANT: This script is for documentation purposes only!"
    error "BGP configuration is NOT supported by the UniFi Terraform provider."
    error "Manual configuration is required."
    echo ""
    
    check_privileges
    check_connectivity
    show_bgp_config
    
    echo ""
    info "Choose configuration method:"
    echo "1. UniFi Network Application (recommended if available)"
    echo "2. SSH Configuration"
    echo "3. API Configuration (advanced)"
    echo "4. Run validation checks"
    echo "5. Exit"
    echo ""
    
    read -p "Enter your choice (1-5): " choice
    
    case $choice in
        1)
            generate_ui_config
            ;;
        2)
            generate_ssh_config
            ;;
        3)
            generate_api_config
            ;;
        4)
            run_validation
            ;;
        5)
            log "Exiting..."
            exit 0
            ;;
        *)
            error "Invalid choice. Please run the script again."
            exit 1
            ;;
    esac
    
    echo ""
    info "Configuration steps have been displayed above."
    info "Please follow the appropriate method for your environment."
    warn "Remember to test BGP configuration in a development environment first!"
}

# Execute main function
main "$@"
#!/bin/bash
# Pre-commit hook that runs linters on changed files only

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running pre-commit linting checks...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Check if there are any staged files
if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✓ No staged files to check${NC}"
    exit 0
fi

# Initialize error flag
ERRORS=0

# Check Python files
PYTHON_FILES=$(echo "$STAGED_FILES" | grep -E '\.py$' || true)
if [ -n "$PYTHON_FILES" ]; then
    echo -e "${YELLOW}Checking Python files...${NC}"
    
    # Run ruff on Python files
    if ! mise exec python@3.12 -- python -m ruff check $PYTHON_FILES; then
        echo -e "${RED}✗ Python linting failed${NC}"
        ERRORS=1
    else
        echo -e "${GREEN}✓ Python linting passed${NC}"
    fi
    
    # Check Python formatting
    if ! mise exec python@3.12 -- python -m black --check $PYTHON_FILES; then
        echo -e "${RED}✗ Python formatting check failed${NC}"
        echo -e "${YELLOW}Run 'task lint:fix' to auto-fix formatting issues${NC}"
        ERRORS=1
    else
        echo -e "${GREEN}✓ Python formatting check passed${NC}"
    fi
fi

# Check Terraform files
TF_FILES=$(echo "$STAGED_FILES" | grep -E '\.tf$' || true)
if [ -n "$TF_FILES" ]; then
    echo -e "${YELLOW}Checking Terraform files...${NC}"
    
    # Check if we're in a terraform directory or need to specify one
    if [ -f "main.tf" ] || [ -f "versions.tf" ]; then
        # We're in a terraform directory
        if ! mise exec -- tflint .; then
            echo -e "${RED}✗ Terraform linting failed${NC}"
            ERRORS=1
        else
            echo -e "${GREEN}✓ Terraform linting passed${NC}"
        fi
    else
        # Check common terraform directories
        for tf_dir in environments/*/; do
            if [ -d "$tf_dir" ] && echo "$TF_FILES" | grep -q "^$tf_dir"; then
                echo -e "${YELLOW}Checking $tf_dir...${NC}"
                if ! mise exec -- tflint --chdir="$tf_dir"; then
                    echo -e "${RED}✗ Terraform linting failed in $tf_dir${NC}"
                    ERRORS=1
                else
                    echo -e "${GREEN}✓ Terraform linting passed in $tf_dir${NC}"
                fi
            fi
        done
    fi
    
    # Check Terraform formatting
    if ! tofu fmt -check -recursive .; then
        echo -e "${RED}✗ Terraform formatting check failed${NC}"
        echo -e "${YELLOW}Run 'tofu fmt -recursive .' to fix formatting${NC}"
        ERRORS=1
    else
        echo -e "${GREEN}✓ Terraform formatting check passed${NC}"
    fi
fi

# Check shell scripts
SHELL_FILES=$(echo "$STAGED_FILES" | grep -E '\.(sh|bash)$' || true)
if [ -n "$SHELL_FILES" ]; then
    echo -e "${YELLOW}Checking shell scripts...${NC}"
    
    # Run shellcheck on shell files (allow warnings)
    if mise exec -- shellcheck $SHELL_FILES; then
        echo -e "${GREEN}✓ Shell script linting passed${NC}"
    else
        # shellcheck found issues, but we will allow warnings
        echo -e "${YELLOW}⚠ Shell script warnings found (not blocking commit)${NC}"
    fi
fi

# Check mise configuration
MISE_FILES=$(echo "$STAGED_FILES" | grep -E '\.mise\.toml$' || true)
if [ -n "$MISE_FILES" ]; then
    echo -e "${YELLOW}Checking mise configuration...${NC}"
    
    # Validate mise configuration
    if mise ls >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Mise configuration is valid${NC}"
    else
        echo -e "${RED}✗ Mise configuration is invalid${NC}"
        ERRORS=1
    fi
fi

# Final result
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}✗ Pre-commit checks failed. Please fix the issues above.${NC}"
    echo -e "${YELLOW}Tip: Run 'task lint:fix' to auto-fix many issues${NC}"
    exit 1
fi